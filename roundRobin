#include<stdio.h>
#define MAX 10

struct process{
    int process_id;
    int burst_time;
    int remain_time;
};

void roundrobin(struct process processes[],int num_process,int time_quantum){
    int completed=0,total_time=0;
    int turn_around_time[MAX],waiting_time[MAX];
    
    while(completed<num_process){
        for(int i=0;i<num_process;i++){
            if(processes[i].remain_time>0){
               int execute_time=(processes[i].remain_time<time_quantum) ? processes[i].remain_time : time_quantum;
               total_time+=execute_time;
               processes[i].remain_time-=execute_time;
               
               if(processes[i].remain_time==0){
                   turn_around_time[i]=total_time;
                   waiting_time[i]=total_time-processes[i].burst_time;
                   completed++;
               }
            }
        }
    }
    
    double avg_waiting_time=0,avg_turnaround_time=0;
    printf("process execution details\n");
     printf("Process ID\tBurst Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < num_process; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time, turn_around_time[i], waiting_time[i]);
        avg_turnaround_time += turn_around_time[i];
        avg_waiting_time += waiting_time[i];
    }

    avg_turnaround_time /= num_process;
    avg_waiting_time /= num_process;
}
int main(){
    int num_process, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &num_process);
    
     printf("Enter time quantum for Round Robin: ");
    scanf("%d", &time_quantum);

    struct process processes[MAX];

    printf("Enter burst time for each process:\n");
    for (int i = 0; i < num_process; i++) {
        processes[i].process_id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        
         processes[i].remain_time = processes[i].burst_time;
}
  roundrobin(processes, num_process, time_quantum);

    return 0;
}
